{
  "_args": [
    [
      "axios@https://github.com/github-tools/axios.git",
      "C:\\Users\\joshu\\Desktop\\chat\\socket.io\\examples\\chat\\node_modules\\github-api"
    ]
  ],
  "_from": "git+https://github.com/github-tools/axios.git",
  "_id": "axios@0.9.0",
  "_inCache": true,
  "_location": "/axios",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/github-tools/axios/master/package.json",
      "gitUrl": "git://github.com/github-tools/axios.git",
      "httpsUrl": "git+https://github.com/github-tools/axios.git",
      "shortcut": "github:github-tools/axios",
      "ssh": "git@github.com:github-tools/axios.git",
      "sshUrl": "git+ssh://git@github.com/github-tools/axios.git",
      "type": "github"
    },
    "name": "axios",
    "raw": "axios@https://github.com/github-tools/axios.git",
    "rawSpec": "https://github.com/github-tools/axios.git",
    "scope": null,
    "spec": "git+https://github.com/github-tools/axios.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/github-api"
  ],
  "_resolved": "git+https://github.com/github-tools/axios.git#65e8691b48e10a11a064f0e027dd3d7e0b97609c",
  "_shasum": "78e04871e95d065c4506dad23e01db4caef30b22",
  "_shrinkwrap": null,
  "_spec": "axios@https://github.com/github-tools/axios.git",
  "_where": "C:\\Users\\joshu\\Desktop\\chat\\socket.io\\examples\\chat\\node_modules\\github-api",
  "author": {
    "name": "Matt Zabriskie"
  },
  "browser": {
    "./lib/adapters/http.js": "./lib/adapters/xhr.js"
  },
  "bugs": {
    "url": "https://github.com/mzabriskie/axios/issues"
  },
  "dependencies": {
    "follow-redirects": "0.0.7"
  },
  "description": "Promise based HTTP client for the browser and node.js",
  "devDependencies": {
    "coveralls": "2.11.6",
    "es6-promise": "3.0.2",
    "grunt": "0.4.5",
    "grunt-banner": "0.6.0",
    "grunt-cli": "0.1.13",
    "grunt-contrib-clean": "0.7.0",
    "grunt-contrib-nodeunit": "0.4.1",
    "grunt-contrib-watch": "0.6.1",
    "grunt-eslint": "17.3.1",
    "grunt-karma": "0.12.1",
    "grunt-ts": "5.3.2",
    "grunt-update-json": "0.2.2",
    "grunt-webpack": "1.0.11",
    "istanbul-instrumenter-loader": "^0.1.3",
    "jasmine-core": "2.4.1",
    "karma": "0.13.19",
    "karma-coverage": "0.5.3",
    "karma-jasmine": "0.3.6",
    "karma-jasmine-ajax": "0.1.13",
    "karma-phantomjs-launcher": "0.2.3",
    "karma-sinon": "1.0.4",
    "karma-sourcemap-loader": "0.3.7",
    "karma-webpack": "1.7.0",
    "load-grunt-tasks": "3.4.0",
    "minimist": "1.2.0",
    "phantomjs": "1.9.19",
    "webpack": "1.12.11",
    "webpack-dev-server": "1.14.1"
  },
  "gitHead": "65e8691b48e10a11a064f0e027dd3d7e0b97609c",
  "homepage": "https://github.com/mzabriskie/axios",
  "installable": true,
  "keywords": [
    "ajax",
    "http",
    "node",
    "promise",
    "xhr"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "axios",
  "optionalDependencies": {},
  "readme": "# axios\r\n\r\n[![npm version](https://img.shields.io/npm/v/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\r\n[![build status](https://img.shields.io/travis/mzabriskie/axios.svg?style=flat-square)](https://travis-ci.org/mzabriskie/axios)\r\n[![code coverage](https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/axios)\r\n[![npm downloads](https://img.shields.io/npm/dm/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\r\n[![dev dependencies](https://img.shields.io/david/dev/mzabriskie/axios.svg?style=flat-square)](https://david-dm.org/mzabriskie/axios#info=devDependencies)\r\n\r\nPromise based HTTP client for the browser and node.js\r\n\r\n## Features\r\n\r\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\r\n- Make [http](http://nodejs.org/api/http.html) requests from node.js\r\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\r\n- Intercept request and response\r\n- Transform request and response data\r\n- Automatic transforms for JSON data\r\n- Client side support for protecting against [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\r\n\r\n## Browser Support\r\n\r\n![Chrome](https://raw.github.com/alrra/browser-logos/master/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/opera/opera_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/internet-explorer/internet-explorer_48x48.png) |\r\n--- | --- | --- | --- | --- |\r\nLatest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | 8+ ✔ |\r\n\r\n## Installing\r\n\r\nUsing bower:\r\n\r\n```bash\r\n$ bower install axios\r\n```\r\n\r\nUsing npm:\r\n\r\n```bash\r\n$ npm install axios\r\n```\r\n\r\n## Example\r\n\r\nPerforming a `GET` request\r\n\r\n```js\r\n// Make a request for a user with a given ID\r\naxios.get('/user?ID=12345')\r\n  .then(function (response) {\r\n    console.log(response);\r\n  })\r\n  .catch(function (response) {\r\n    console.log(response);\r\n  });\r\n\r\n// Optionally the request above could also be done as\r\naxios.get('/user', {\r\n    params: {\r\n      ID: 12345\r\n    }\r\n  })\r\n  .then(function (response) {\r\n    console.log(response);\r\n  })\r\n  .catch(function (response) {\r\n    console.log(response);\r\n  });\r\n```\r\n\r\nPerforming a `POST` request\r\n\r\n```js\r\naxios.post('/user', {\r\n    firstName: 'Fred',\r\n    lastName: 'Flintstone'\r\n  })\r\n  .then(function (response) {\r\n    console.log(response);\r\n  })\r\n  .catch(function (response) {\r\n    console.log(response);\r\n  });\r\n```\r\n\r\nPerforming multiple concurrent requests\r\n\r\n```js\r\nfunction getUserAccount() {\r\n  return axios.get('/user/12345');\r\n}\r\n\r\nfunction getUserPermissions() {\r\n  return axios.get('/user/12345/permissions');\r\n}\r\n\r\naxios.all([getUserAccount(), getUserPermissions()])\r\n  .then(axios.spread(function (acct, perms) {\r\n    // Both requests are now complete\r\n  }));\r\n```\r\n\r\n## axios API\r\n\r\nRequests can be made by passing the relevant config to `axios`.\r\n\r\n##### axios(config)\r\n\r\n```js\r\naxios({\r\n  method: 'get',\r\n  url: '/user/12345'\r\n});\r\n```\r\n\r\n### Request method aliases\r\n\r\nFor convenience aliases have been provided for all supported request methods.\r\n\r\n##### axios.get(url[, config])\r\n##### axios.delete(url[, config])\r\n##### axios.head(url[, config])\r\n##### axios.post(url[, data[, config]])\r\n##### axios.put(url[, data[, config]])\r\n##### axios.patch(url[, data[, config]])\r\n\r\n###### NOTE\r\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\r\n\r\n### Concurrency\r\n\r\nHelper functions for dealing with concurrent requests.\r\n\r\n##### axios.all(iterable)\r\n##### axios.spread(callback)\r\n\r\n### Creating an instance\r\n\r\nYou can create a new instance of axios with a custom config.\r\n\r\n##### axios.create([config])\r\n\r\n```js\r\nvar instance = axios.create({\r\n  baseURL: 'https://some-domain.com/api/',\r\n  timeout: 1000,\r\n  headers: {'X-Custom-Header': 'foobar'}\r\n});\r\n```\r\n\r\n### Instance methods\r\n\r\nThe available instance methods are listed below. The specified config will be merged with the instance config.\r\n\r\n##### axios#request(config)\r\n##### axios#get(url[, config])\r\n##### axios#delete(url[, config])\r\n##### axios#head(url[, config])\r\n##### axios#post(url[, data[, config]])\r\n##### axios#put(url[, data[, config]])\r\n##### axios#patch(url[, data[, config]])\r\n\r\n## Request API\r\n\r\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\r\n\r\n```js\r\n{\r\n  // `url` is the server URL that will be used for the request\r\n  url: '/user',\r\n  \r\n  // `method` is the request method to be used when making the request\r\n  method: 'get', // default\r\n\r\n  // `baseURL` will be prepended to `url` unless `url` is absolute. \r\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs \r\n  // to methods of that instance.\r\n  baseURL: 'https://some-domain.com/api/',\r\n\r\n  // `transformRequest` allows changes to the request data before it is sent to the server\r\n  // This is only applicable for request methods 'PUT', 'POST', and 'PATCH'\r\n  // The last function in the array must return a string or an ArrayBuffer\r\n  transformRequest: [function (data) {\r\n    // Do whatever you want to transform the data\r\n\r\n    return data;\r\n  }],\r\n\r\n  // `transformResponse` allows changes to the response data to be made before\r\n  // it is passed to then/catch\r\n  transformResponse: [function (data) {\r\n    // Do whatever you want to transform the data\r\n\r\n    return data;\r\n  }],\r\n\r\n  // `headers` are custom headers to be sent\r\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\r\n\r\n  // `param` are the URL parameters to be sent with the request\r\n  params: {\r\n    ID: 12345\r\n  },\r\n\r\n  // `paramsSerializer` is an optional function in charge of serializing `params`\r\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\r\n  paramsSerializer: function(params) {\r\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\r\n  },\r\n\r\n  // `data` is the data to be sent as the request body\r\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\r\n  // When no `transformRequest` is set, must be a string, an ArrayBuffer or a hash\r\n  data: {\r\n    firstName: 'Fred'\r\n  },\r\n\r\n  // `timeout` specifies the number of milliseconds before the request times out.\r\n  // If the request takes longer than `timeout`, the request will be aborted.\r\n  timeout: 1000,\r\n\r\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\r\n  // should be made using credentials\r\n  withCredentials: false, // default\r\n\r\n  // `adapter` allows custom handling of requests which makes testing easier.\r\n  // Call `resolve` or `reject` and supply a valid response (see [response docs](#response-api)).\r\n  adapter: function (resolve, reject, config) {\r\n    /* ... */\r\n  },\r\n\r\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\r\n  // This will set an `Authorization` header, overwriting any existing\r\n  // `Authorization` custom headers you have set using `headers`.\r\n  auth: {\r\n    username: 'janedoe',\r\n    password: 's00pers3cret'\r\n  }\r\n\r\n  // `responseType` indicates the type of data that the server will respond with\r\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text'\r\n  responseType: 'json', // default\r\n\r\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\r\n  xsrfCookieName: 'XSRF-TOKEN', // default\r\n\r\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\r\n  xsrfHeaderName: 'X-XSRF-TOKEN' // default\r\n}\r\n```\r\n\r\n## Response API\r\n\r\nThe response for a request contains the following information.\r\n\r\n```js\r\n{\r\n  // `data` is the response that was provided by the server\r\n  data: {},\r\n\r\n  // `status` is the HTTP status code from the server response\r\n  status: 200,\r\n\r\n  // `statusText` is the HTTP status message from the server response\r\n  statusText: 'OK',\r\n\r\n  // `headers` the headers that the server responded with\r\n  headers: {},\r\n\r\n  // `config` is the config that was provided to `axios` for the request\r\n  config: {}\r\n}\r\n```\r\n\r\nWhen using `then` or `catch`, you will receive the response as follows:\r\n\r\n```js\r\naxios.get('/user/12345')\r\n  .then(function(response) {\r\n    console.log(response.data);\r\n    console.log(response.status);\r\n    console.log(response.statusText);\r\n    console.log(response.headers);\r\n    console.log(response.config);\r\n});\r\n```\r\n\r\n## Interceptors\r\n\r\nYou can intercept requests or responses before they are handled by `then` or `catch`.\r\n\r\n```js\r\n// Add a request interceptor\r\naxios.interceptors.request.use(function (config) {\r\n    // Do something before request is sent\r\n    return config;\r\n  }, function (error) {\r\n    // Do something with request error\r\n    return Promise.reject(error);\r\n  });\r\n\r\n// Add a response interceptor\r\naxios.interceptors.response.use(function (response) {\r\n    // Do something with response data\r\n    return response;\r\n  }, function (error) {\r\n    // Do something with response error\r\n    return Promise.reject(error);\r\n  });\r\n```\r\n\r\nIf you may need to remove an interceptor later you can.\r\n\r\n```js\r\nvar myInterceptor = axios.interceptors.request.use(function () {/*...*/});\r\naxios.interceptors.request.eject(myInterceptor);\r\n```\r\n\r\nYou can add interceptors to a custom instance of axios.\r\n\r\n```js\r\nvar instance = axios.create();\r\ninstance.interceptors.request.use(function () {/*...*/});\r\n```\r\n\r\n## Handling Errors\r\n\r\n```js\r\naxios.get('/user/12345')\r\n  .catch(function (response) {\r\n    if (response instanceof Error) {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.log('Error', response.message);\r\n    } else {\r\n      // The request was made, but the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      console.log(response.data);\r\n      console.log(response.status);\r\n      console.log(response.headers);\r\n      console.log(response.config);\r\n    }\r\n  });\r\n```\r\n\r\n## Semver\r\n\r\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\r\n\r\n## Promises\r\n\r\naxios depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\r\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\r\n\r\n## TypeScript\r\naxios includes a [TypeScript](http://typescriptlang.org) definition.\r\n```typescript\r\n/// <reference path=\"axios.d.ts\" />\r\nimport axios = require('axios');\r\naxios.get('/user?ID=12345');\r\n```\r\n\r\n## Credits\r\n\r\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [Angular](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of Angular.\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mzabriskie/axios.git"
  },
  "scripts": {
    "build": "grunt build",
    "coveralls": "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
    "examples": "node ./examples/server.js",
    "start": "node ./sandbox/server.js",
    "test": "grunt test"
  },
  "typescript": {
    "definition": "./axios.d.ts"
  },
  "version": "0.9.0"
}
